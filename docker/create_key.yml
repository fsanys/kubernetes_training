---
- hosts: local
  connection: local
  gather_facts: False
  vars:
    aws_access_key: "{{ aws_access_key }}"
    aws_secret_key: "{{ aws_secret_key }}"
    instance_type: t2.micro
    security_group: flask_group
    image: ami-0c5199d385b432989
    keypair: training_kubernetes
    region: ap-southeast-1
  vars_files:
   - aws_keys.yml
   - secrets_smtp.yml
   - vars.yml
  tasks:
   - name: create a new ec2 key pair, returns generated private key
     ec2_key:
       region: "{{ region }}"
       aws_access_key: "{{ aws_access_key }}"
       aws_secret_key: "{{ aws_secret_key }}" 
       name: "{{ keypair }}"
     register: ec2_key_result

   - name: Save Private Key
     copy: content="{{ ec2_key_result.key.private_key }}" dest="./test.pem" mode=0600
     when: ec2_key_result.changed

   - name: Convert Key to ppk
     command: 'yum -y install putty'
     become: true

   - name: Install Apache
     command: 'puttygen test.pem -o test.ppk -O private'
     become: true
    
   - name: Create Security Group
     ec2_group:
       name: "{{ security_group }}"
       description: The webservers security group
       region: "{{ region }}"
       aws_access_key: "{{ aws_access_key }}"
       aws_secret_key: "{{ aws_secret_key }}"
       rules:
       - proto: tcp
         from_port: 22
         to_port: 22
         cidr_ip: 0.0.0.0/0
       - proto: tcp
         from_port: 80
         to_port: 80
         cidr_ip: 0.0.0.0/0
       - proto: tcp
         from_port: 443
         to_port: 443
         cidr_ip: 0.0.0.0/0
       rules_egress:
       - proto: all
         cidr_ip: 0.0.0.0/0 

   - name: Launch the new EC2 Instance
     ec2:
       region: "{{ region }}"
       aws_access_key: "{{ aws_access_key }}"
       aws_secret_key: "{{ aws_secret_key }}" 
       group: "{{ security_group }}"
       wait: true
       instance_type: "{{ instance_type }}"
       image: "{{ image }}"
       keypair: "{{ keypair }}"
     register: ec2 

   - name: Add the newly created host so that we can further contact it
     add_host:
       name: "{{ item.public_ip }}"
       ansible_user: ubuntu
       ansible_ssh_private_key_file: ./test.pem
       groups: flask
     with_items: "{{ ec2.instances }}"


   - name: Add tag to Instance(s)
     ec2_tag:
       aws_access_key: "{{ aws_access_key }}"
       aws_secret_key: "{{ aws_secret_key }}"
       resource: "{{ item.id }}"
       region: "{{ region }}"
       state: "present"
     with_items: "{{ ec2.instances }}"
     args:
       tags:
         Type: flask 

   - name: Wait for SSH to come up
     wait_for:
       host: "{{ item.public_ip }}"
       port: 22
       state: started
     with_items: "{{ ec2.instances }}"


   - name: Write the new ec2 instance host key to known hosts
     connection: local
     shell: "ssh-keyscan -H {{ item.public_ip }} >> ~/.ssh/known_hosts"
     with_items: "{{ ec2.instances }}"

   - name: Send email notification
     mail:
       host: smtp.gmail.com
       port: 465
       username: test
       password: "{{ mail_password }}"
       to: test
       subject: Kubernetes Training - Docker setup
       body: |
         Hello,
         Please find the details of the virtual machine created for the Kubernetes training (Docker image)
         IP: {{ item.public_ip }}
         Private Key: Enclosed (If using Windows please convert using 
         OpenStack Admin
     with_items: "{{ ec2.instances }}"

- hosts: flask
  remote_user: ubuntu
  become: yes
  gather_facts: no
  pre_tasks:
   - name: 'install python'
     raw: 'sudo apt-get -y install python3'
  tasks:
   - name: Install Apache
     apt:
       name: nginx
       state: present
   - service:
       name: nginx
       state: started
       enabled: yes
